cmake_minimum_required(VERSION 2.8)

project(Yeppp C CXX)

set(CMAKE_BUILD_TYPE Release)

set(YEPPP_LIBRARY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/library)
set(YEPPP_LIBRARY_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/library/sources)
set(YEPPP_LIBRARY_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/library/headers)
set(YEPPP_JNI_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bindings/java/sources-jni)

file(GLOB_RECURSE YEPPP_LIBRARY_SOURCES ${YEPPP_LIBRARY_SOURCE_DIR}/*.cpp)
file(GLOB_RECURSE YEPPP_JNI_SOURCES ${YEPPP_JNI_SOURCE_DIR}/*.c)
file(GLOB_RECURSE YEPPP_LIBRARY_MICROSOFT_X64_ASSEMBLY ${YEPPP_LIBRARY_SOURCE_DIR}/*.x64-ms.asm)
file(GLOB_RECURSE YEPPP_LIBRARY_SYSTEMV_X64_ASSEMBLY ${YEPPP_LIBRARY_SOURCE_DIR}/*.x64-sysv.asm)
file(GLOB_RECURSE YEPPP_LIBRARY_NONPIC_X86_ASSEMBLY ${YEPPP_LIBRARY_SOURCE_DIR}/*.x86-nonpic.asm)
file(GLOB_RECURSE YEPPP_LIBRARY_PIC_X86_ASSEMBLY ${YEPPP_LIBRARY_SOURCE_DIR}/*.x86-pic.asm)
file(GLOB_RECURSE YEPPP_LIBRARY_SOFTEABI_ARM_ASSEMBLY ${YEPPP_LIBRARY_SOURCE_DIR}/*.arm-softeabi.asm)
file(GLOB_RECURSE YEPPP_LIBRARY_HARDEABI_ARM_ASSEMBLY ${YEPPP_LIBRARY_SOURCE_DIR}/*.arm-hardeabi.asm)
set(YEPPP_SOURCES "${YEPPP_LIBRARY_SOURCES}")

if(YEPPP_TARGET_NAME STREQUAL "linux-x86")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/linux/x86")
	ENABLE_LANGUAGE(ASM_NASM)
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
elseif(YEPPP_TARGET_NAME STREQUAL "linux-x86_64")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/linux/x86_64")
	ENABLE_LANGUAGE(ASM_NASM)
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SYSTEMV_X64_ASSEMBLY}")
elseif(YEPPP_TARGET_NAME STREQUAL "linux-k1om")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/linux/k1om")
elseif(YEPPP_TARGET_NAME STREQUAL "linux-armel")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/linux/armel")
	enable_language(ASM-ATT)
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOURCE_DIR}/library/Probe.arm.asm")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOFTEABI_ARM_ASSEMBLY}")
elseif(YEPPP_TARGET_NAME STREQUAL "linux-armhf")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/linux/armhf")
	enable_language(ASM-ATT)
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOURCE_DIR}/library/Probe.arm.asm")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_HARDEABI_ARM_ASSEMBLY}")
elseif(YEPPP_TARGET_NAME STREQUAL "linux-ppc64")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/linux/ppc64")
	enable_language(ASM-ATT)
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOURCE_DIR}/library/Probe.ppc64.asm")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
elseif(YEPPP_TARGET_NAME STREQUAL "linux-bgq")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/linux/bgq")
elseif(YEPPP_TARGET_NAME STREQUAL "android-armeabi")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/android/armeabi")
	enable_language(ASM-ATT)
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOURCE_DIR}/library/Probe.arm.asm")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOFTEABI_ARM_ASSEMBLY}")
elseif(YEPPP_TARGET_NAME STREQUAL "android-armeabiv7a")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/android/armeabiv7a")
	enable_language(ASM-ATT)
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOURCE_DIR}/library/Probe.arm.asm")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOFTEABI_ARM_ASSEMBLY}")
elseif(YEPPP_TARGET_NAME STREQUAL "android-mips")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/android/mips")
	enable_language(ASM-ATT)
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_SOURCE_DIR}/library/Probe.mips.asm")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
elseif(YEPPP_TARGET_NAME STREQUAL "android-x86")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/android/x86")
	SET(CMAKE_ASM_NASM_OBJECT_FORMAT elf32)
	ENABLE_LANGUAGE(ASM_NASM)
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
elseif(YEPPP_TARGET_NAME STREQUAL "windows-x86")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/windows/x86")
	set(CMAKE_SYSTEM_PROCESSOR "x86")
	set(CMAKE_ASM_NASM_OBJECT_FORMAT win32 CACHE STRING "")
	enable_language(ASM_NASM)
	set(CMAKE_ASM_NASM_COMPILE_OBJECT "<CMAKE_ASM_NASM_COMPILER> -f ${CMAKE_ASM_NASM_OBJECT_FORMAT} -o <OBJECT> <SOURCE>" CACHE STRING "")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_NONPIC_X86_ASSEMBLY}")
elseif(YEPPP_TARGET_NAME STREQUAL "windows-x86_64")
	set(YEPPP_PLATFORM_BINARIES_DIR "${CMAKE_CURRENT_SOURCE_DIR}/binaries/windows/x86_64")
	set(CMAKE_SYSTEM_PROCESSOR "x86")
	set(CMAKE_ASM_NASM_OBJECT_FORMAT win64 CACHE STRING "")
	enable_language(ASM_NASM)
	set(CMAKE_ASM_NASM_COMPILE_OBJECT "<CMAKE_ASM_NASM_COMPILER> -f ${CMAKE_ASM_NASM_OBJECT_FORMAT} -o <OBJECT> <SOURCE>" CACHE STRING "")
	list(APPEND YEPPP_SOURCES "${YEPPP_JNI_SOURCES}")
	list(APPEND YEPPP_SOURCES "${YEPPP_LIBRARY_MICROSOFT_X64_ASSEMBLY}")
else()
	message(FATAL_ERROR "Unsupported target ${YEPPP_TARGET_NAME}")
endif()

message(STATUS "PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
set(CMAKE_OSX_DEPLOYMENT_TARGET 10.5)

if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/CpuWindows.cpp)
endif()
if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/CpuMacOSX.cpp)
endif()
if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Linux|Android")
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/CpuLinux.cpp)
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/Unsafe.cpp)
endif()
if(NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86")
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/CpuX86.cpp)
endif()
if(NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "arm")
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/CpuArm.cpp)
endif()
if(NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "mips")
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/CpuMips.cpp)
endif()
if(NOT ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ppc")
	LIST(REMOVE_ITEM YEPPP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/library/sources/library/CpuPPC.cpp)
endif()

find_package(JNI)
if(NOT "${JAVA_INCLUDE_PATH}" STREQUAL "JAVA_INCLUDE_PATH-NOTFOUND")
	include_directories("${JAVA_INCLUDE_PATH}")
	if(NOT "${JAVA_INCLUDE_PATH2}" STREQUAL "JAVA_INCLUDE_PATH2-NOTFOUND")
		include_directories("${JAVA_INCLUDE_PATH2}")
	endif()
else()
	message(FATAL_ERROR "Could not find JNI headers")
endif()

include_directories(${YEPPP_LIBRARY_SOURCE_DIR})
include_directories(${YEPPP_LIBRARY_INCLUDE_DIR})
include_directories(${YEPPP_JNI_SOURCE_DIR})
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/runtime/binaries/${YEPPP_TARGET_NAME}/")
add_definitions( -DYEP_BUILD_LIBRARY )
add_library(yeppp SHARED ${YEPPP_SOURCES})
set_target_properties(yeppp PROPERTIES LINKER_LANGUAGE CXX)
if(NOT "${YEPPP_TARGET_NAME}" STREQUAL "linux-ppc64")
	target_link_libraries(yeppp yeprt)
endif()
set_target_properties(yeppp PROPERTIES COMPILE_FLAGS "${YEP_C_FLAGS_NO_RUNTIME} ${YEP_C_FLAGS_PIC_CODE}")
set_target_properties(yeppp
	PROPERTIES
	VERSION 1.0
	SOVERSION 1
)

add_custom_command(TARGET yeppp POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:yeppp> "${YEPPP_PLATFORM_BINARIES_DIR}/$<TARGET_FILE_NAME:yeppp>")
